#!/bin/bash
# bash is required because we need bash's printf to guarantee a cross-platform
# timestamp format.

set -e
set -x

# make sure we're on a signed tag that matches the version name
versionName=`sed -n 's,.*versionName="\([^"]*\)".*,\1,p' AndroidManifest.xml`
describe=`git describe`
if [ $versionName != $describe ]; then
    echo "WARNING: checking out release tag $versionName"
   git checkout $versionName
fi
git tag -v $versionName


if [ -z $ANDROID_HOME ]; then
    if [ -e ~/.android/bashrc ]; then
        . ~/.android/bashrc
    else
        echo "ANDROID_HOME must be set!"
        exit
    fi
fi

if [ -z $ANDROID_NDK ]; then
    if which ndk-build 2>&1 /dev/null; then
        ANDROID_NDK=`which ndk-build |  sed 's,/ndk-build,,'`
    else
        echo "ANDROID_NDK not set and 'ndk-build' not in PATH"
        exit
    fi
fi

projectroot=`pwd`

# standardize timezone to reduce build differences
export TZ=UTC
# run the clock at 5% speed, ant requires a moving clock
TIMESTAMP=`printf '@%(%Y-%m-%d %H:%M:%S)T x0.05' \
    $(git log -n1 --format=format:%at)`

git reset --hard
git clean -fdx
git submodule foreach --recursive git reset --hard
git submodule foreach --recursive git clean -fdx
git submodule sync --recursive
git submodule foreach --recursive git submodule sync
git submodule update --init --recursive

make -C external/
$ANDROID_NDK/ndk-build

if [ -e ~/.android/ant.properties ]; then
    cp ~/.android/ant.properties $projectroot/
else
    echo "skipping release ant.properties"
fi

./setup-ant.sh
faketime -f "$TIMESTAMP" ant release

if which gpg > /dev/null; then
    if [ -z "`gpg --list-secret-keys`" ]; then
        echo "No GPG secret keys found, not signing APK"
else
        gpg --detach-sign bin/GnuPrivacyGuard-[0-9].*-release.apk
    fi
else
    echo "gpg not found, not signing APK"
fi
