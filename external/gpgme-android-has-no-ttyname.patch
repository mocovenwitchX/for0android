From 831e5ffbe9991a14347a84e49dc747197d8d354c Mon Sep 17 00:00:00 2001
From: Hans-Christoph Steiner <hans@eds.org>
Date: Tue, 23 Oct 2012 20:41:56 -0400
Subject: [PATCH 1/1] Android does not have ttyname() or ttyname_r(), use
 replacement

Android has stubs for ttyname() and ttyname_r(), so they get
detected. But they don't actually do anything but print out an
warning to stderr:
    FIX ME! implement ttyname_r() bionic/libc/bionic/stubs.c:466

Therefore the ./configure detection logic had to be kludged to
workaround this.
---
 m4/gnupg-ttyname.m4 |   14 +++++++++++++-
 src/ttyname_r.c     |    2 +-
 2 files changed, 14 insertions(+), 2 deletions(-)

diff --git a/m4/gnupg-ttyname.m4 b/m4/gnupg-ttyname.m4
index d9a0e2e..c862ae5 100644
--- a/m4/gnupg-ttyname.m4
+++ b/m4/gnupg-ttyname.m4
@@ -36,7 +36,19 @@ AC_DEFUN([gnupg_REPLACE_TTYNAME_R],
     HAVE_DECL_TTYNAME_R=0
   fi
 
-  AC_CHECK_FUNCS([ttyname_r])
+  dnl Android has stubs for ttyname() and ttyname_r(), so they get
+  dnl detected. But they don't actually do anything but print out an
+  dnl warning to stderr:
+  dnl    FIX ME! implement ttyname_r() bionic/libc/bionic/stubs.c:466
+  case "$host_os" in
+       *android*)
+                echo "forcing no ttyname_r() for Android"
+                ac_cv_func_ttyname_r=no
+                ;;
+       *)
+                AC_CHECK_FUNCS([ttyname_r])
+                ;;
+  esac
   if test $ac_cv_func_ttyname_r = no; then
     HAVE_TTYNAME_R=0
     AC_LIBOBJ([ttyname_r])
diff --git a/src/ttyname_r.c b/src/ttyname_r.c
index 105e0af..1306728 100644
--- a/src/ttyname_r.c
+++ b/src/ttyname_r.c
@@ -110,7 +110,7 @@ _gpgme_ttyname_r (int fd, char *buf, size_t buflen)
 #else /*!HAVE_TTYNAME_R*/
   char *tty;
 
-# if HAVE_W32_SYSTEM
+# if HAVE_W32_SYSTEM || defined __ANDROID__
   /* We use this default one for now.  AFAICS we only need it to be
      passed to gpg and in turn to pinentry.  Providing a replacement
      is needed because elsewhere we bail out on error.  If we
-- 
1.7.9.5

